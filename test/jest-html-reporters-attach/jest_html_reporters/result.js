window.jest_html_reporters_callback__({"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":8,"numPassedTests":46,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":8,"numTotalTests":46,"startTime":1713931998147,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1713932012552,"runtime":13813,"slow":true,"start":1713931998739},"testFilePath":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\src\\app.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["AppController","root"],"duration":103,"failureMessages":[],"fullName":"AppController root should return \"Hello World!\"","status":"passed","title":"should return \"Hello World!\""}]},{"numFailingTests":0,"numPassingTests":10,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1713932013888,"runtime":15152,"slow":true,"start":1713931998736},"testFilePath":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\test\\unit-test-admin\\admin.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["AdminController"],"duration":56,"failureMessages":[],"fullName":"AdminController should return View list of companies","status":"passed","title":"should return View list of companies"},{"ancestorTitles":["AdminController"],"duration":39,"failureMessages":[],"fullName":"AdminController should throw NotFoundException when companies is not found","status":"passed","title":"should throw NotFoundException when companies is not found"},{"ancestorTitles":["AdminController"],"duration":7,"failureMessages":[],"fullName":"AdminController should return View list of Angent","status":"passed","title":"should return View list of Angent"},{"ancestorTitles":["AdminController"],"duration":7,"failureMessages":[],"fullName":"AdminController should throw NotFoundException when angentcies is not found","status":"passed","title":"should throw NotFoundException when angentcies is not found"},{"ancestorTitles":["AdminController"],"duration":6,"failureMessages":[],"fullName":"AdminController should change role to admin the user when user is found","status":"passed","title":"should change role to admin the user when user is found"},{"ancestorTitles":["AdminController"],"duration":5,"failureMessages":[],"fullName":"AdminController shold throw ConflictException if user is already admin","status":"passed","title":"shold throw ConflictException if user is already admin"},{"ancestorTitles":["AdminController"],"duration":9,"failureMessages":[],"fullName":"AdminController should activate an agent","status":"passed","title":"should activate an agent"},{"ancestorTitles":["AdminController"],"duration":6,"failureMessages":[],"fullName":"AdminController should throw ConflictException if agent is already active","status":"passed","title":"should throw ConflictException if agent is already active"},{"ancestorTitles":["AdminController"],"duration":8,"failureMessages":[],"fullName":"AdminController should call create company and return the result","status":"passed","title":"should call create company and return the result"},{"ancestorTitles":["AdminController"],"duration":5,"failureMessages":[],"fullName":"AdminController should call createUser and return the result","status":"passed","title":"should call createUser and return the result"}]},{"numFailingTests":0,"numPassingTests":6,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1713932014063,"runtime":15328,"slow":true,"start":1713931998735},"testFilePath":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\test\\unit-test-property\\property.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["PropertyController"],"duration":44,"failureMessages":[],"fullName":"PropertyController should call create property and return the result","status":"passed","title":"should call create property and return the result"},{"ancestorTitles":["PropertyController"],"duration":4,"failureMessages":[],"fullName":"PropertyController should call update method with userId and updateUserDto and return the updated user","status":"passed","title":"should call update method with userId and updateUserDto and return the updated user"},{"ancestorTitles":["PropertyController"],"duration":3,"failureMessages":[],"fullName":"PropertyController should return all users with their roles","status":"passed","title":"should return all users with their roles"},{"ancestorTitles":["PropertyController"],"duration":5,"failureMessages":[],"fullName":"PropertyController should return the user when user is found","status":"passed","title":"should return the user when user is found"},{"ancestorTitles":["PropertyController"],"duration":28,"failureMessages":[],"fullName":"PropertyController should throw NotFoundException when property is not found","status":"passed","title":"should throw NotFoundException when property is not found"},{"ancestorTitles":["PropertyController"],"duration":4,"failureMessages":[],"fullName":"PropertyController should deleteProperty the user when property is found","status":"passed","title":"should deleteProperty the user when property is found"}]},{"numFailingTests":0,"numPassingTests":6,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1713932014187,"runtime":15453,"slow":true,"start":1713931998734},"testFilePath":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\test\\unit-test-company\\company.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["CompanyController"],"duration":58,"failureMessages":[],"fullName":"CompanyController should call create company and return the result","status":"passed","title":"should call create company and return the result"},{"ancestorTitles":["CompanyController"],"duration":5,"failureMessages":[],"fullName":"CompanyController should call update method with userId and updateUserDto and return the updated user","status":"passed","title":"should call update method with userId and updateUserDto and return the updated user"},{"ancestorTitles":["CompanyController"],"duration":4,"failureMessages":[],"fullName":"CompanyController should return all users with their roles","status":"passed","title":"should return all users with their roles"},{"ancestorTitles":["CompanyController"],"duration":3,"failureMessages":[],"fullName":"CompanyController should return the user when user is found","status":"passed","title":"should return the user when user is found"},{"ancestorTitles":["CompanyController"],"duration":26,"failureMessages":[],"fullName":"CompanyController should throw NotFoundException when user is not found","status":"passed","title":"should throw NotFoundException when user is not found"},{"ancestorTitles":["CompanyController"],"duration":4,"failureMessages":[],"fullName":"CompanyController should remove the user when user is found","status":"passed","title":"should remove the user when user is found"}]},{"numFailingTests":0,"numPassingTests":6,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1713932014206,"runtime":15464,"slow":true,"start":1713931998742},"testFilePath":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\test\\unit-test-user\\users.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["UsersController"],"duration":48,"failureMessages":[],"fullName":"UsersController should call createUser and return the result","status":"passed","title":"should call createUser and return the result"},{"ancestorTitles":["UsersController"],"duration":6,"failureMessages":[],"fullName":"UsersController should call update method with userId and updateUserDto and return the updated user","status":"passed","title":"should call update method with userId and updateUserDto and return the updated user"},{"ancestorTitles":["UsersController"],"duration":4,"failureMessages":[],"fullName":"UsersController should return all users with their roles","status":"passed","title":"should return all users with their roles"},{"ancestorTitles":["UsersController"],"duration":5,"failureMessages":[],"fullName":"UsersController should return the user when user is found","status":"passed","title":"should return the user when user is found"},{"ancestorTitles":["UsersController"],"duration":29,"failureMessages":[],"fullName":"UsersController should throw NotFoundException when user is not found","status":"passed","title":"should throw NotFoundException when user is not found"},{"ancestorTitles":["UsersController"],"duration":5,"failureMessages":[],"fullName":"UsersController should remove the user when user is found","status":"passed","title":"should remove the user when user is found"}]},{"numFailingTests":0,"numPassingTests":6,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1713932014214,"runtime":15459,"slow":true,"start":1713931998755},"testFilePath":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\test\\unit-test-agent\\agent.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["AgentController"],"duration":40,"failureMessages":[],"fullName":"AgentController should call createagent and return the result","status":"passed","title":"should call createagent and return the result"},{"ancestorTitles":["AgentController"],"duration":4,"failureMessages":[],"fullName":"AgentController should call update method with agentId and updateagentDto and return the updated agent","status":"passed","title":"should call update method with agentId and updateagentDto and return the updated agent"},{"ancestorTitles":["AgentController"],"duration":3,"failureMessages":[],"fullName":"AgentController should return all agents with their roles","status":"passed","title":"should return all agents with their roles"},{"ancestorTitles":["AgentController"],"duration":5,"failureMessages":[],"fullName":"AgentController should return the agent when agent is found","status":"passed","title":"should return the agent when agent is found"},{"ancestorTitles":["AgentController"],"duration":28,"failureMessages":[],"fullName":"AgentController should throw NotFoundException when agent is not found","status":"passed","title":"should throw NotFoundException when agent is not found"},{"ancestorTitles":["AgentController"],"duration":9,"failureMessages":[],"fullName":"AgentController should remove the agent when agent is found","status":"passed","title":"should remove the agent when agent is found"}]},{"numFailingTests":0,"numPassingTests":6,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1713932014234,"runtime":15499,"slow":true,"start":1713931998735},"testFilePath":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\test\\unit-test-unit\\unit.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["UnitController"],"duration":20,"failureMessages":[],"fullName":"UnitController should call createUnit and return the result","status":"passed","title":"should call createUnit and return the result"},{"ancestorTitles":["UnitController"],"duration":1,"failureMessages":[],"fullName":"UnitController should call update method with UnitId and updateUnitDto and return the updated Unit","status":"passed","title":"should call update method with UnitId and updateUnitDto and return the updated Unit"},{"ancestorTitles":["UnitController"],"duration":1,"failureMessages":[],"fullName":"UnitController should return all Units with their roles","status":"passed","title":"should return all Units with their roles"},{"ancestorTitles":["UnitController"],"duration":0,"failureMessages":[],"fullName":"UnitController should return the Unit when Unit is found","status":"passed","title":"should return the Unit when Unit is found"},{"ancestorTitles":["UnitController"],"duration":24,"failureMessages":[],"fullName":"UnitController should throw NotFoundException when Unit is not found","status":"passed","title":"should throw NotFoundException when Unit is not found"},{"ancestorTitles":["UnitController"],"duration":3,"failureMessages":[],"fullName":"UnitController should remove the Unit when Unit is found","status":"passed","title":"should remove the Unit when Unit is found"}]},{"numFailingTests":0,"numPassingTests":5,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1713932014781,"runtime":16046,"slow":true,"start":1713931998735},"testFilePath":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\test\\unit-test-auth\\auth.controller.spec.ts","failureMessage":null,"testResults":[{"ancestorTitles":["AuthService","signIn"],"duration":192,"failureMessages":[],"fullName":"AuthService signIn should throw NotFoundException if email does not exist","status":"passed","title":"should throw NotFoundException if email does not exist"},{"ancestorTitles":["AuthService","signIn"],"duration":13,"failureMessages":[],"fullName":"AuthService signIn should throw UnauthorizedException if password is incorrect","status":"passed","title":"should throw UnauthorizedException if password is incorrect"},{"ancestorTitles":["AuthService","refreshTokens"],"duration":9,"failureMessages":[],"fullName":"AuthService refreshTokens should throw ForbiddenException if user or hashed refresh token does not exist","status":"passed","title":"should throw ForbiddenException if user or hashed refresh token does not exist"},{"ancestorTitles":["AuthService","refreshTokens"],"duration":7,"failureMessages":[],"fullName":"AuthService refreshTokens should throw ForbiddenException if provided refresh token does not match stored hash","status":"passed","title":"should throw ForbiddenException if provided refresh token does not match stored hash"},{"ancestorTitles":["AuthService","refreshTokens"],"duration":9,"failureMessages":[],"fullName":"AuthService refreshTokens should return new tokens if refresh token matches stored hash","status":"passed","title":"should return new tokens if refresh token matches stored hash"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":true,"collectCoverageFrom":["src/**/*.ts","!src/**/*.spec.ts","!src/main.ts","!src/**/index.ts","!src/**/*.module.ts","!src/common/**"],"coverageDirectory":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\coverage","coverageProvider":"v8","coverageReporters":["json","text","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":15,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["D:\\Back-End Traning\\BaseCamp-BE\\back-end\\node_modules\\jest-html-reporters\\index.js",{}]],"rootDir":"D:\\Back-End Traning\\BaseCamp-BE\\back-end","runTestsByPath":false,"seed":-2087340199,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"","testSequencer":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false,"coverageLinkPath":"..\\coverage\\lcov-report\\index.html"},"endTime":1713932015044,"_reporterOptions":{"publicPath":"D:\\Back-End Traning\\BaseCamp-BE\\back-end\\test","filename":"jest_html_reporters.html","expand":false,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})